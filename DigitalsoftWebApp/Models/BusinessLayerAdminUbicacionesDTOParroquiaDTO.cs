/* 
 * API Servicios Integrados InventPro ERP - DigitalsoftEC
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = api.digitalsoftec.net.Client.SwaggerDateConverter;
namespace api.digitalsoftec.net.Model
{
    /// <summary>
    /// BusinessLayerAdminUbicacionesDTOParroquiaDTO
    /// </summary>
    [DataContract]
        public partial class BusinessLayerAdminUbicacionesDTOParroquiaDTO :  IEquatable<BusinessLayerAdminUbicacionesDTOParroquiaDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessLayerAdminUbicacionesDTOParroquiaDTO" /> class.
        /// </summary>
        /// <param name="parroquiaId">parroquiaId.</param>
        /// <param name="parroquiaNombre">parroquiaNombre.</param>
        /// <param name="parroquiaActiva">parroquiaActiva.</param>
        /// <param name="ciudadId">ciudadId.</param>
        /// <param name="ciudad">ciudad.</param>
        public BusinessLayerAdminUbicacionesDTOParroquiaDTO(string parroquiaId = default(string), string parroquiaNombre = default(string), bool? parroquiaActiva = default(bool?), string ciudadId = default(string), BusinessLayerAdminUbicacionesDTOCiudadDTO ciudad = default(BusinessLayerAdminUbicacionesDTOCiudadDTO))
        {
            this.parroquia_id = parroquiaId;
            this.parroquia_nombre = parroquiaNombre;
            this.parroquia_activa = parroquiaActiva;
            this.ciudad_id = ciudadId;
            this.ciudad = ciudad;
        }
        
        /// <summary>
        /// Gets or Sets parroquia_id
        /// </summary>
        [DataMember(Name="parroquia_id", EmitDefaultValue=false)]
        public string parroquia_id { get; set; }

        /// <summary>
        /// Gets or Sets parroquia_nombre
        /// </summary>
        [DataMember(Name="parroquia_nombre", EmitDefaultValue=false)]
        public string parroquia_nombre { get; set; }

        /// <summary>
        /// Gets or Sets parroquia_activa
        /// </summary>
        [DataMember(Name="parroquia_activa", EmitDefaultValue=false)]
        public bool? parroquia_activa { get; set; }

        /// <summary>
        /// Gets or Sets ciudad_id
        /// </summary>
        [DataMember(Name="ciudad_id", EmitDefaultValue=false)]
        public string ciudad_id { get; set; }

        /// <summary>
        /// Gets or Sets ciudad
        /// </summary>
        [DataMember(Name="ciudad", EmitDefaultValue=false)]
        public BusinessLayerAdminUbicacionesDTOCiudadDTO ciudad { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BusinessLayerAdminUbicacionesDTOParroquiaDTO {\n");
            sb.Append("  parroquia_id: ").Append(parroquia_id).Append("\n");
            sb.Append("  parroquia_nombre: ").Append(parroquia_nombre).Append("\n");
            sb.Append("  parroquia_activa: ").Append(parroquia_activa).Append("\n");
            sb.Append("  ciudad_id: ").Append(ciudad_id).Append("\n");
            sb.Append("  ciudad: ").Append(ciudad).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BusinessLayerAdminUbicacionesDTOParroquiaDTO);
        }

        /// <summary>
        /// Returns true if BusinessLayerAdminUbicacionesDTOParroquiaDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of BusinessLayerAdminUbicacionesDTOParroquiaDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BusinessLayerAdminUbicacionesDTOParroquiaDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.parroquia_id == input.parroquia_id ||
                    (this.parroquia_id != null &&
                    this.parroquia_id.Equals(input.parroquia_id))
                ) && 
                (
                    this.parroquia_nombre == input.parroquia_nombre ||
                    (this.parroquia_nombre != null &&
                    this.parroquia_nombre.Equals(input.parroquia_nombre))
                ) && 
                (
                    this.parroquia_activa == input.parroquia_activa ||
                    (this.parroquia_activa != null &&
                    this.parroquia_activa.Equals(input.parroquia_activa))
                ) && 
                (
                    this.ciudad_id == input.ciudad_id ||
                    (this.ciudad_id != null &&
                    this.ciudad_id.Equals(input.ciudad_id))
                ) && 
                (
                    this.ciudad == input.ciudad ||
                    (this.ciudad != null &&
                    this.ciudad.Equals(input.ciudad))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.parroquia_id != null)
                    hashCode = hashCode * 59 + this.parroquia_id.GetHashCode();
                if (this.parroquia_nombre != null)
                    hashCode = hashCode * 59 + this.parroquia_nombre.GetHashCode();
                if (this.parroquia_activa != null)
                    hashCode = hashCode * 59 + this.parroquia_activa.GetHashCode();
                if (this.ciudad_id != null)
                    hashCode = hashCode * 59 + this.ciudad_id.GetHashCode();
                if (this.ciudad != null)
                    hashCode = hashCode * 59 + this.ciudad.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
