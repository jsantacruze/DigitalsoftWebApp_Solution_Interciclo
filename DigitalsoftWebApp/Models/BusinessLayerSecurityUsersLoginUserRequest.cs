/* 
 * API Servicios Integrados InventPro ERP - DigitalsoftEC
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = api.digitalsoftec.net.Client.SwaggerDateConverter;
namespace api.digitalsoftec.net.Model
{
    /// <summary>
    /// BusinessLayerSecurityUsersLoginUserRequest
    /// </summary>
    [DataContract]
        public partial class BusinessLayerSecurityUsersLoginUserRequest :  IEquatable<BusinessLayerSecurityUsersLoginUserRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessLayerSecurityUsersLoginUserRequest" /> class.
        /// </summary>
        /// <param name="email">email.</param>
        /// <param name="password">password.</param>
        public BusinessLayerSecurityUsersLoginUserRequest(string email = default(string), string password = default(string))
        {
            this.email = email;
            this.password = password;
        }
        
        /// <summary>
        /// Gets or Sets email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string email { get; set; }

        /// <summary>
        /// Gets or Sets password
        /// </summary>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string password { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BusinessLayerSecurityUsersLoginUserRequest {\n");
            sb.Append("  email: ").Append(email).Append("\n");
            sb.Append("  password: ").Append(password).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BusinessLayerSecurityUsersLoginUserRequest);
        }

        /// <summary>
        /// Returns true if BusinessLayerSecurityUsersLoginUserRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of BusinessLayerSecurityUsersLoginUserRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BusinessLayerSecurityUsersLoginUserRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.email == input.email ||
                    (this.email != null &&
                    this.email.Equals(input.email))
                ) && 
                (
                    this.password == input.password ||
                    (this.password != null &&
                    this.password.Equals(input.password))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.email != null)
                    hashCode = hashCode * 59 + this.email.GetHashCode();
                if (this.password != null)
                    hashCode = hashCode * 59 + this.password.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
