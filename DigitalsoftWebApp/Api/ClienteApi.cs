/* 
 * API Servicios Integrados InventPro ERP - DigitalsoftEC
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using api.digitalsoftec.net.Client;
using api.digitalsoftec.net.Model;

namespace api.digitalsoftec.net.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IClienteApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>BusinessLayerVentasClientesDTOClienteDTO</returns>
        BusinessLayerVentasClientesDTOClienteDTO ApiClienteCreatePost (BusinessLayerVentasClientesHelpersCreateClienteRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BusinessLayerVentasClientesDTOClienteDTO</returns>
        ApiResponse<BusinessLayerVentasClientesDTOClienteDTO> ApiClienteCreatePostWithHttpInfo (BusinessLayerVentasClientesHelpersCreateClienteRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>bool?</returns>
        bool? ApiClienteDeleteDelete (BusinessLayerVentasClientesHelpersDeleteClienteRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> ApiClienteDeleteDeleteWithHttpInfo (BusinessLayerVentasClientesHelpersDeleteClienteRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>BusinessLayerVentasClientesDTOClienteDTO</returns>
        BusinessLayerVentasClientesDTOClienteDTO ApiClienteEditPut (BusinessLayerVentasClientesHelpersEditClienteRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BusinessLayerVentasClientesDTOClienteDTO</returns>
        ApiResponse<BusinessLayerVentasClientesDTOClienteDTO> ApiClienteEditPutWithHttpInfo (BusinessLayerVentasClientesHelpersEditClienteRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>BusinessLayerVentasClientesDTOClienteDTO</returns>
        BusinessLayerVentasClientesDTOClienteDTO ApiClienteGetByIdPost (BusinessLayerVentasClientesHelpersFindClienteRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BusinessLayerVentasClientesDTOClienteDTO</returns>
        ApiResponse<BusinessLayerVentasClientesDTOClienteDTO> ApiClienteGetByIdPostWithHttpInfo (BusinessLayerVentasClientesHelpersFindClienteRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>BusinessLayerVentasClientesDTOClienteDTO</returns>
        BusinessLayerVentasClientesDTOClienteDTO ApiClienteGetByNroIdentificacionPost (BusinessLayerVentasClientesHelpersFindClienteNroIdentificacionRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BusinessLayerVentasClientesDTOClienteDTO</returns>
        ApiResponse<BusinessLayerVentasClientesDTOClienteDTO> ApiClienteGetByNroIdentificacionPostWithHttpInfo (BusinessLayerVentasClientesHelpersFindClienteNroIdentificacionRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;BusinessLayerVentasClientesDTOClienteDTO&gt;</returns>
        List<BusinessLayerVentasClientesDTOClienteDTO> ApiClienteListPost (BusinessLayerVentasClientesHelpersListClientesRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;BusinessLayerVentasClientesDTOClienteDTO&gt;</returns>
        ApiResponse<List<BusinessLayerVentasClientesDTOClienteDTO>> ApiClienteListPostWithHttpInfo (BusinessLayerVentasClientesHelpersListClientesRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>BusinessLayerVentasClientesDTOClienteDTO</returns>
        BusinessLayerVentasClientesDTOClienteDTO ApiClienteNewPost (BusinessLayerVentasClientesHelpersNewClienteRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BusinessLayerVentasClientesDTOClienteDTO</returns>
        ApiResponse<BusinessLayerVentasClientesDTOClienteDTO> ApiClienteNewPostWithHttpInfo (BusinessLayerVentasClientesHelpersNewClienteRequest body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BusinessLayerVentasClientesDTOClienteDTO</returns>
        System.Threading.Tasks.Task<BusinessLayerVentasClientesDTOClienteDTO> ApiClienteCreatePostAsync (BusinessLayerVentasClientesHelpersCreateClienteRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BusinessLayerVentasClientesDTOClienteDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BusinessLayerVentasClientesDTOClienteDTO>> ApiClienteCreatePostAsyncWithHttpInfo (BusinessLayerVentasClientesHelpersCreateClienteRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> ApiClienteDeleteDeleteAsync (BusinessLayerVentasClientesHelpersDeleteClienteRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> ApiClienteDeleteDeleteAsyncWithHttpInfo (BusinessLayerVentasClientesHelpersDeleteClienteRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BusinessLayerVentasClientesDTOClienteDTO</returns>
        System.Threading.Tasks.Task<BusinessLayerVentasClientesDTOClienteDTO> ApiClienteEditPutAsync (BusinessLayerVentasClientesHelpersEditClienteRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BusinessLayerVentasClientesDTOClienteDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BusinessLayerVentasClientesDTOClienteDTO>> ApiClienteEditPutAsyncWithHttpInfo (BusinessLayerVentasClientesHelpersEditClienteRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BusinessLayerVentasClientesDTOClienteDTO</returns>
        System.Threading.Tasks.Task<BusinessLayerVentasClientesDTOClienteDTO> ApiClienteGetByIdPostAsync (BusinessLayerVentasClientesHelpersFindClienteRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BusinessLayerVentasClientesDTOClienteDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BusinessLayerVentasClientesDTOClienteDTO>> ApiClienteGetByIdPostAsyncWithHttpInfo (BusinessLayerVentasClientesHelpersFindClienteRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BusinessLayerVentasClientesDTOClienteDTO</returns>
        System.Threading.Tasks.Task<BusinessLayerVentasClientesDTOClienteDTO> ApiClienteGetByNroIdentificacionPostAsync (BusinessLayerVentasClientesHelpersFindClienteNroIdentificacionRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BusinessLayerVentasClientesDTOClienteDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BusinessLayerVentasClientesDTOClienteDTO>> ApiClienteGetByNroIdentificacionPostAsyncWithHttpInfo (BusinessLayerVentasClientesHelpersFindClienteNroIdentificacionRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of List&lt;BusinessLayerVentasClientesDTOClienteDTO&gt;</returns>
        System.Threading.Tasks.Task<List<BusinessLayerVentasClientesDTOClienteDTO>> ApiClienteListPostAsync (BusinessLayerVentasClientesHelpersListClientesRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;BusinessLayerVentasClientesDTOClienteDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BusinessLayerVentasClientesDTOClienteDTO>>> ApiClienteListPostAsyncWithHttpInfo (BusinessLayerVentasClientesHelpersListClientesRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BusinessLayerVentasClientesDTOClienteDTO</returns>
        System.Threading.Tasks.Task<BusinessLayerVentasClientesDTOClienteDTO> ApiClienteNewPostAsync (BusinessLayerVentasClientesHelpersNewClienteRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BusinessLayerVentasClientesDTOClienteDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BusinessLayerVentasClientesDTOClienteDTO>> ApiClienteNewPostAsyncWithHttpInfo (BusinessLayerVentasClientesHelpersNewClienteRequest body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ClienteApi : IClienteApi
    {
        private api.digitalsoftec.net.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ClienteApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ClienteApi(String basePath)
        {
            this.Configuration = new api.digitalsoftec.net.Client.Configuration { BasePath = basePath };

            ExceptionFactory = api.digitalsoftec.net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClienteApi"/> class
        /// </summary>
        /// <returns></returns>
        public ClienteApi()
        {
            this.Configuration = api.digitalsoftec.net.Client.Configuration.Default;

            ExceptionFactory = api.digitalsoftec.net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClienteApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ClienteApi(api.digitalsoftec.net.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = api.digitalsoftec.net.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = api.digitalsoftec.net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public api.digitalsoftec.net.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public api.digitalsoftec.net.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>BusinessLayerVentasClientesDTOClienteDTO</returns>
        public BusinessLayerVentasClientesDTOClienteDTO ApiClienteCreatePost (BusinessLayerVentasClientesHelpersCreateClienteRequest body = null)
        {
             ApiResponse<BusinessLayerVentasClientesDTOClienteDTO> localVarResponse = ApiClienteCreatePostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BusinessLayerVentasClientesDTOClienteDTO</returns>
        public ApiResponse< BusinessLayerVentasClientesDTOClienteDTO > ApiClienteCreatePostWithHttpInfo (BusinessLayerVentasClientesHelpersCreateClienteRequest body = null)
        {

            var localVarPath = "/api/Cliente/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiClienteCreatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessLayerVentasClientesDTOClienteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BusinessLayerVentasClientesDTOClienteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessLayerVentasClientesDTOClienteDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BusinessLayerVentasClientesDTOClienteDTO</returns>
        public async System.Threading.Tasks.Task<BusinessLayerVentasClientesDTOClienteDTO> ApiClienteCreatePostAsync (BusinessLayerVentasClientesHelpersCreateClienteRequest body = null)
        {
             ApiResponse<BusinessLayerVentasClientesDTOClienteDTO> localVarResponse = await ApiClienteCreatePostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BusinessLayerVentasClientesDTOClienteDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BusinessLayerVentasClientesDTOClienteDTO>> ApiClienteCreatePostAsyncWithHttpInfo (BusinessLayerVentasClientesHelpersCreateClienteRequest body = null)
        {

            var localVarPath = "/api/Cliente/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiClienteCreatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessLayerVentasClientesDTOClienteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BusinessLayerVentasClientesDTOClienteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessLayerVentasClientesDTOClienteDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>bool?</returns>
        public bool? ApiClienteDeleteDelete (BusinessLayerVentasClientesHelpersDeleteClienteRequest body = null)
        {
             ApiResponse<bool?> localVarResponse = ApiClienteDeleteDeleteWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > ApiClienteDeleteDeleteWithHttpInfo (BusinessLayerVentasClientesHelpersDeleteClienteRequest body = null)
        {

            var localVarPath = "/api/Cliente/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiClienteDeleteDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> ApiClienteDeleteDeleteAsync (BusinessLayerVentasClientesHelpersDeleteClienteRequest body = null)
        {
             ApiResponse<bool?> localVarResponse = await ApiClienteDeleteDeleteAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> ApiClienteDeleteDeleteAsyncWithHttpInfo (BusinessLayerVentasClientesHelpersDeleteClienteRequest body = null)
        {

            var localVarPath = "/api/Cliente/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiClienteDeleteDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>BusinessLayerVentasClientesDTOClienteDTO</returns>
        public BusinessLayerVentasClientesDTOClienteDTO ApiClienteEditPut (BusinessLayerVentasClientesHelpersEditClienteRequest body = null)
        {
             ApiResponse<BusinessLayerVentasClientesDTOClienteDTO> localVarResponse = ApiClienteEditPutWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BusinessLayerVentasClientesDTOClienteDTO</returns>
        public ApiResponse< BusinessLayerVentasClientesDTOClienteDTO > ApiClienteEditPutWithHttpInfo (BusinessLayerVentasClientesHelpersEditClienteRequest body = null)
        {

            var localVarPath = "/api/Cliente/edit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiClienteEditPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessLayerVentasClientesDTOClienteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BusinessLayerVentasClientesDTOClienteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessLayerVentasClientesDTOClienteDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BusinessLayerVentasClientesDTOClienteDTO</returns>
        public async System.Threading.Tasks.Task<BusinessLayerVentasClientesDTOClienteDTO> ApiClienteEditPutAsync (BusinessLayerVentasClientesHelpersEditClienteRequest body = null)
        {
             ApiResponse<BusinessLayerVentasClientesDTOClienteDTO> localVarResponse = await ApiClienteEditPutAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BusinessLayerVentasClientesDTOClienteDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BusinessLayerVentasClientesDTOClienteDTO>> ApiClienteEditPutAsyncWithHttpInfo (BusinessLayerVentasClientesHelpersEditClienteRequest body = null)
        {

            var localVarPath = "/api/Cliente/edit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiClienteEditPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessLayerVentasClientesDTOClienteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BusinessLayerVentasClientesDTOClienteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessLayerVentasClientesDTOClienteDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>BusinessLayerVentasClientesDTOClienteDTO</returns>
        public BusinessLayerVentasClientesDTOClienteDTO ApiClienteGetByIdPost (BusinessLayerVentasClientesHelpersFindClienteRequest body = null)
        {
             ApiResponse<BusinessLayerVentasClientesDTOClienteDTO> localVarResponse = ApiClienteGetByIdPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BusinessLayerVentasClientesDTOClienteDTO</returns>
        public ApiResponse< BusinessLayerVentasClientesDTOClienteDTO > ApiClienteGetByIdPostWithHttpInfo (BusinessLayerVentasClientesHelpersFindClienteRequest body = null)
        {

            var localVarPath = "/api/Cliente/get-by-id";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiClienteGetByIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessLayerVentasClientesDTOClienteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BusinessLayerVentasClientesDTOClienteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessLayerVentasClientesDTOClienteDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BusinessLayerVentasClientesDTOClienteDTO</returns>
        public async System.Threading.Tasks.Task<BusinessLayerVentasClientesDTOClienteDTO> ApiClienteGetByIdPostAsync (BusinessLayerVentasClientesHelpersFindClienteRequest body = null)
        {
             ApiResponse<BusinessLayerVentasClientesDTOClienteDTO> localVarResponse = await ApiClienteGetByIdPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BusinessLayerVentasClientesDTOClienteDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BusinessLayerVentasClientesDTOClienteDTO>> ApiClienteGetByIdPostAsyncWithHttpInfo (BusinessLayerVentasClientesHelpersFindClienteRequest body = null)
        {

            var localVarPath = "/api/Cliente/get-by-id";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiClienteGetByIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessLayerVentasClientesDTOClienteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BusinessLayerVentasClientesDTOClienteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessLayerVentasClientesDTOClienteDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>BusinessLayerVentasClientesDTOClienteDTO</returns>
        public BusinessLayerVentasClientesDTOClienteDTO ApiClienteGetByNroIdentificacionPost (BusinessLayerVentasClientesHelpersFindClienteNroIdentificacionRequest body = null)
        {
             ApiResponse<BusinessLayerVentasClientesDTOClienteDTO> localVarResponse = ApiClienteGetByNroIdentificacionPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BusinessLayerVentasClientesDTOClienteDTO</returns>
        public ApiResponse< BusinessLayerVentasClientesDTOClienteDTO > ApiClienteGetByNroIdentificacionPostWithHttpInfo (BusinessLayerVentasClientesHelpersFindClienteNroIdentificacionRequest body = null)
        {

            var localVarPath = "/api/Cliente/get-by-nro-identificacion";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiClienteGetByNroIdentificacionPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessLayerVentasClientesDTOClienteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BusinessLayerVentasClientesDTOClienteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessLayerVentasClientesDTOClienteDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BusinessLayerVentasClientesDTOClienteDTO</returns>
        public async System.Threading.Tasks.Task<BusinessLayerVentasClientesDTOClienteDTO> ApiClienteGetByNroIdentificacionPostAsync (BusinessLayerVentasClientesHelpersFindClienteNroIdentificacionRequest body = null)
        {
             ApiResponse<BusinessLayerVentasClientesDTOClienteDTO> localVarResponse = await ApiClienteGetByNroIdentificacionPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BusinessLayerVentasClientesDTOClienteDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BusinessLayerVentasClientesDTOClienteDTO>> ApiClienteGetByNroIdentificacionPostAsyncWithHttpInfo (BusinessLayerVentasClientesHelpersFindClienteNroIdentificacionRequest body = null)
        {

            var localVarPath = "/api/Cliente/get-by-nro-identificacion";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiClienteGetByNroIdentificacionPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessLayerVentasClientesDTOClienteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BusinessLayerVentasClientesDTOClienteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessLayerVentasClientesDTOClienteDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;BusinessLayerVentasClientesDTOClienteDTO&gt;</returns>
        public List<BusinessLayerVentasClientesDTOClienteDTO> ApiClienteListPost (BusinessLayerVentasClientesHelpersListClientesRequest body = null)
        {
             ApiResponse<List<BusinessLayerVentasClientesDTOClienteDTO>> localVarResponse = ApiClienteListPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;BusinessLayerVentasClientesDTOClienteDTO&gt;</returns>
        public ApiResponse< List<BusinessLayerVentasClientesDTOClienteDTO> > ApiClienteListPostWithHttpInfo (BusinessLayerVentasClientesHelpersListClientesRequest body = null)
        {

            var localVarPath = "/api/Cliente/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiClienteListPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BusinessLayerVentasClientesDTOClienteDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<BusinessLayerVentasClientesDTOClienteDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BusinessLayerVentasClientesDTOClienteDTO>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of List&lt;BusinessLayerVentasClientesDTOClienteDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<BusinessLayerVentasClientesDTOClienteDTO>> ApiClienteListPostAsync (BusinessLayerVentasClientesHelpersListClientesRequest body = null)
        {
             ApiResponse<List<BusinessLayerVentasClientesDTOClienteDTO>> localVarResponse = await ApiClienteListPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;BusinessLayerVentasClientesDTOClienteDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BusinessLayerVentasClientesDTOClienteDTO>>> ApiClienteListPostAsyncWithHttpInfo (BusinessLayerVentasClientesHelpersListClientesRequest body = null)
        {

            var localVarPath = "/api/Cliente/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiClienteListPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BusinessLayerVentasClientesDTOClienteDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<BusinessLayerVentasClientesDTOClienteDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BusinessLayerVentasClientesDTOClienteDTO>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>BusinessLayerVentasClientesDTOClienteDTO</returns>
        public BusinessLayerVentasClientesDTOClienteDTO ApiClienteNewPost (BusinessLayerVentasClientesHelpersNewClienteRequest body = null)
        {
             ApiResponse<BusinessLayerVentasClientesDTOClienteDTO> localVarResponse = ApiClienteNewPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BusinessLayerVentasClientesDTOClienteDTO</returns>
        public ApiResponse< BusinessLayerVentasClientesDTOClienteDTO > ApiClienteNewPostWithHttpInfo (BusinessLayerVentasClientesHelpersNewClienteRequest body = null)
        {

            var localVarPath = "/api/Cliente/new";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiClienteNewPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessLayerVentasClientesDTOClienteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BusinessLayerVentasClientesDTOClienteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessLayerVentasClientesDTOClienteDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BusinessLayerVentasClientesDTOClienteDTO</returns>
        public async System.Threading.Tasks.Task<BusinessLayerVentasClientesDTOClienteDTO> ApiClienteNewPostAsync (BusinessLayerVentasClientesHelpersNewClienteRequest body = null)
        {
             ApiResponse<BusinessLayerVentasClientesDTOClienteDTO> localVarResponse = await ApiClienteNewPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BusinessLayerVentasClientesDTOClienteDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BusinessLayerVentasClientesDTOClienteDTO>> ApiClienteNewPostAsyncWithHttpInfo (BusinessLayerVentasClientesHelpersNewClienteRequest body = null)
        {

            var localVarPath = "/api/Cliente/new";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiClienteNewPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessLayerVentasClientesDTOClienteDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BusinessLayerVentasClientesDTOClienteDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessLayerVentasClientesDTOClienteDTO)));
        }

    }
}
