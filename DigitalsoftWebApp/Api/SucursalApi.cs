/* 
 * API Servicios Integrados InventPro ERP - DigitalsoftEC
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using api.digitalsoftec.net.Client;
using api.digitalsoftec.net.Model;

namespace api.digitalsoftec.net.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ISucursalApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>BusinessLayerAdminEmpresasDTOPuntoAccesoSecuenciaFacturacionDetalleDTO</returns>
        BusinessLayerAdminEmpresasDTOPuntoAccesoSecuenciaFacturacionDetalleDTO ApiSucursalAssignSecuenciaFacturacionPuntoAccesoPost (BusinessLayerAdminEmpresasHelpersCreatePuntoAccesoSecuenciaFacturacionDetalleRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BusinessLayerAdminEmpresasDTOPuntoAccesoSecuenciaFacturacionDetalleDTO</returns>
        ApiResponse<BusinessLayerAdminEmpresasDTOPuntoAccesoSecuenciaFacturacionDetalleDTO> ApiSucursalAssignSecuenciaFacturacionPuntoAccesoPostWithHttpInfo (BusinessLayerAdminEmpresasHelpersCreatePuntoAccesoSecuenciaFacturacionDetalleRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>BusinessLayerAdminEmpresasDTOPuntoAccesoDTO</returns>
        BusinessLayerAdminEmpresasDTOPuntoAccesoDTO ApiSucursalCreatePuntoAccesoPost (BusinessLayerAdminEmpresasHelpersCreatePuntoAccesoRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BusinessLayerAdminEmpresasDTOPuntoAccesoDTO</returns>
        ApiResponse<BusinessLayerAdminEmpresasDTOPuntoAccesoDTO> ApiSucursalCreatePuntoAccesoPostWithHttpInfo (BusinessLayerAdminEmpresasHelpersCreatePuntoAccesoRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>BusinessLayerAdminEmpresasDTOSucursalDTO</returns>
        BusinessLayerAdminEmpresasDTOSucursalDTO ApiSucursalCreateSucursalPost (BusinessLayerAdminEmpresasHelpersCreateSucursalRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BusinessLayerAdminEmpresasDTOSucursalDTO</returns>
        ApiResponse<BusinessLayerAdminEmpresasDTOSucursalDTO> ApiSucursalCreateSucursalPostWithHttpInfo (BusinessLayerAdminEmpresasHelpersCreateSucursalRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>bool?</returns>
        bool? ApiSucursalDeletePuntoAccesoDelete (BusinessLayerAdminEmpresasHelpersDeletePuntoAccesoRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> ApiSucursalDeletePuntoAccesoDeleteWithHttpInfo (BusinessLayerAdminEmpresasHelpersDeletePuntoAccesoRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>bool?</returns>
        bool? ApiSucursalDeleteSecuenciaFacturacionPuntoAccesoDelete (BusinessLayerAdminEmpresasHelpersDeletePuntoAccesoSecuenciaFacturacionDetalleRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> ApiSucursalDeleteSecuenciaFacturacionPuntoAccesoDeleteWithHttpInfo (BusinessLayerAdminEmpresasHelpersDeletePuntoAccesoSecuenciaFacturacionDetalleRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>bool?</returns>
        bool? ApiSucursalDeleteSucursalDelete (BusinessLayerAdminEmpresasHelpersDeleteSucursalRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> ApiSucursalDeleteSucursalDeleteWithHttpInfo (BusinessLayerAdminEmpresasHelpersDeleteSucursalRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>BusinessLayerAdminEmpresasDTOPuntoAccesoDTO</returns>
        BusinessLayerAdminEmpresasDTOPuntoAccesoDTO ApiSucursalEditPuntoAccesoPut (BusinessLayerAdminEmpresasHelpersEditPuntoAccesoRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BusinessLayerAdminEmpresasDTOPuntoAccesoDTO</returns>
        ApiResponse<BusinessLayerAdminEmpresasDTOPuntoAccesoDTO> ApiSucursalEditPuntoAccesoPutWithHttpInfo (BusinessLayerAdminEmpresasHelpersEditPuntoAccesoRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>BusinessLayerAdminEmpresasDTOSucursalDTO</returns>
        BusinessLayerAdminEmpresasDTOSucursalDTO ApiSucursalEditSucursalPut (BusinessLayerAdminEmpresasHelpersEditSucursalRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BusinessLayerAdminEmpresasDTOSucursalDTO</returns>
        ApiResponse<BusinessLayerAdminEmpresasDTOSucursalDTO> ApiSucursalEditSucursalPutWithHttpInfo (BusinessLayerAdminEmpresasHelpersEditSucursalRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>BusinessLayerAdminEmpresasDTOPuntoAccesoDTO</returns>
        BusinessLayerAdminEmpresasDTOPuntoAccesoDTO ApiSucursalGetPuntoAccesoByIdPost (BusinessLayerAdminEmpresasHelpersFindPuntoAccesoRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BusinessLayerAdminEmpresasDTOPuntoAccesoDTO</returns>
        ApiResponse<BusinessLayerAdminEmpresasDTOPuntoAccesoDTO> ApiSucursalGetPuntoAccesoByIdPostWithHttpInfo (BusinessLayerAdminEmpresasHelpersFindPuntoAccesoRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>BusinessLayerAdminEmpresasDTOSucursalDTO</returns>
        BusinessLayerAdminEmpresasDTOSucursalDTO ApiSucursalGetSucursalByIdPost (BusinessLayerAdminEmpresasHelpersFindSucursalRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BusinessLayerAdminEmpresasDTOSucursalDTO</returns>
        ApiResponse<BusinessLayerAdminEmpresasDTOSucursalDTO> ApiSucursalGetSucursalByIdPostWithHttpInfo (BusinessLayerAdminEmpresasHelpersFindSucursalRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;BusinessLayerAdminEmpresasDTOSucursalDTO&gt;</returns>
        List<BusinessLayerAdminEmpresasDTOSucursalDTO> ApiSucursalListSucursalesPost (BusinessLayerAdminEmpresasHelpersListSucursalesRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;BusinessLayerAdminEmpresasDTOSucursalDTO&gt;</returns>
        ApiResponse<List<BusinessLayerAdminEmpresasDTOSucursalDTO>> ApiSucursalListSucursalesPostWithHttpInfo (BusinessLayerAdminEmpresasHelpersListSucursalesRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;BusinessLayerAdminEmpresasDTOPuntoAccesoDTO&gt;</returns>
        List<BusinessLayerAdminEmpresasDTOPuntoAccesoDTO> ApiSucursalPuntosAccesoListPost (BusinessLayerAdminEmpresasHelpersListPuntosAccesoRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;BusinessLayerAdminEmpresasDTOPuntoAccesoDTO&gt;</returns>
        ApiResponse<List<BusinessLayerAdminEmpresasDTOPuntoAccesoDTO>> ApiSucursalPuntosAccesoListPostWithHttpInfo (BusinessLayerAdminEmpresasHelpersListPuntosAccesoRequest body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BusinessLayerAdminEmpresasDTOPuntoAccesoSecuenciaFacturacionDetalleDTO</returns>
        System.Threading.Tasks.Task<BusinessLayerAdminEmpresasDTOPuntoAccesoSecuenciaFacturacionDetalleDTO> ApiSucursalAssignSecuenciaFacturacionPuntoAccesoPostAsync (BusinessLayerAdminEmpresasHelpersCreatePuntoAccesoSecuenciaFacturacionDetalleRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BusinessLayerAdminEmpresasDTOPuntoAccesoSecuenciaFacturacionDetalleDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BusinessLayerAdminEmpresasDTOPuntoAccesoSecuenciaFacturacionDetalleDTO>> ApiSucursalAssignSecuenciaFacturacionPuntoAccesoPostAsyncWithHttpInfo (BusinessLayerAdminEmpresasHelpersCreatePuntoAccesoSecuenciaFacturacionDetalleRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BusinessLayerAdminEmpresasDTOPuntoAccesoDTO</returns>
        System.Threading.Tasks.Task<BusinessLayerAdminEmpresasDTOPuntoAccesoDTO> ApiSucursalCreatePuntoAccesoPostAsync (BusinessLayerAdminEmpresasHelpersCreatePuntoAccesoRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BusinessLayerAdminEmpresasDTOPuntoAccesoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BusinessLayerAdminEmpresasDTOPuntoAccesoDTO>> ApiSucursalCreatePuntoAccesoPostAsyncWithHttpInfo (BusinessLayerAdminEmpresasHelpersCreatePuntoAccesoRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BusinessLayerAdminEmpresasDTOSucursalDTO</returns>
        System.Threading.Tasks.Task<BusinessLayerAdminEmpresasDTOSucursalDTO> ApiSucursalCreateSucursalPostAsync (BusinessLayerAdminEmpresasHelpersCreateSucursalRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BusinessLayerAdminEmpresasDTOSucursalDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BusinessLayerAdminEmpresasDTOSucursalDTO>> ApiSucursalCreateSucursalPostAsyncWithHttpInfo (BusinessLayerAdminEmpresasHelpersCreateSucursalRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> ApiSucursalDeletePuntoAccesoDeleteAsync (BusinessLayerAdminEmpresasHelpersDeletePuntoAccesoRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> ApiSucursalDeletePuntoAccesoDeleteAsyncWithHttpInfo (BusinessLayerAdminEmpresasHelpersDeletePuntoAccesoRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> ApiSucursalDeleteSecuenciaFacturacionPuntoAccesoDeleteAsync (BusinessLayerAdminEmpresasHelpersDeletePuntoAccesoSecuenciaFacturacionDetalleRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> ApiSucursalDeleteSecuenciaFacturacionPuntoAccesoDeleteAsyncWithHttpInfo (BusinessLayerAdminEmpresasHelpersDeletePuntoAccesoSecuenciaFacturacionDetalleRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> ApiSucursalDeleteSucursalDeleteAsync (BusinessLayerAdminEmpresasHelpersDeleteSucursalRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> ApiSucursalDeleteSucursalDeleteAsyncWithHttpInfo (BusinessLayerAdminEmpresasHelpersDeleteSucursalRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BusinessLayerAdminEmpresasDTOPuntoAccesoDTO</returns>
        System.Threading.Tasks.Task<BusinessLayerAdminEmpresasDTOPuntoAccesoDTO> ApiSucursalEditPuntoAccesoPutAsync (BusinessLayerAdminEmpresasHelpersEditPuntoAccesoRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BusinessLayerAdminEmpresasDTOPuntoAccesoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BusinessLayerAdminEmpresasDTOPuntoAccesoDTO>> ApiSucursalEditPuntoAccesoPutAsyncWithHttpInfo (BusinessLayerAdminEmpresasHelpersEditPuntoAccesoRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BusinessLayerAdminEmpresasDTOSucursalDTO</returns>
        System.Threading.Tasks.Task<BusinessLayerAdminEmpresasDTOSucursalDTO> ApiSucursalEditSucursalPutAsync (BusinessLayerAdminEmpresasHelpersEditSucursalRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BusinessLayerAdminEmpresasDTOSucursalDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BusinessLayerAdminEmpresasDTOSucursalDTO>> ApiSucursalEditSucursalPutAsyncWithHttpInfo (BusinessLayerAdminEmpresasHelpersEditSucursalRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BusinessLayerAdminEmpresasDTOPuntoAccesoDTO</returns>
        System.Threading.Tasks.Task<BusinessLayerAdminEmpresasDTOPuntoAccesoDTO> ApiSucursalGetPuntoAccesoByIdPostAsync (BusinessLayerAdminEmpresasHelpersFindPuntoAccesoRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BusinessLayerAdminEmpresasDTOPuntoAccesoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BusinessLayerAdminEmpresasDTOPuntoAccesoDTO>> ApiSucursalGetPuntoAccesoByIdPostAsyncWithHttpInfo (BusinessLayerAdminEmpresasHelpersFindPuntoAccesoRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BusinessLayerAdminEmpresasDTOSucursalDTO</returns>
        System.Threading.Tasks.Task<BusinessLayerAdminEmpresasDTOSucursalDTO> ApiSucursalGetSucursalByIdPostAsync (BusinessLayerAdminEmpresasHelpersFindSucursalRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BusinessLayerAdminEmpresasDTOSucursalDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BusinessLayerAdminEmpresasDTOSucursalDTO>> ApiSucursalGetSucursalByIdPostAsyncWithHttpInfo (BusinessLayerAdminEmpresasHelpersFindSucursalRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of List&lt;BusinessLayerAdminEmpresasDTOSucursalDTO&gt;</returns>
        System.Threading.Tasks.Task<List<BusinessLayerAdminEmpresasDTOSucursalDTO>> ApiSucursalListSucursalesPostAsync (BusinessLayerAdminEmpresasHelpersListSucursalesRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;BusinessLayerAdminEmpresasDTOSucursalDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BusinessLayerAdminEmpresasDTOSucursalDTO>>> ApiSucursalListSucursalesPostAsyncWithHttpInfo (BusinessLayerAdminEmpresasHelpersListSucursalesRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of List&lt;BusinessLayerAdminEmpresasDTOPuntoAccesoDTO&gt;</returns>
        System.Threading.Tasks.Task<List<BusinessLayerAdminEmpresasDTOPuntoAccesoDTO>> ApiSucursalPuntosAccesoListPostAsync (BusinessLayerAdminEmpresasHelpersListPuntosAccesoRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;BusinessLayerAdminEmpresasDTOPuntoAccesoDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BusinessLayerAdminEmpresasDTOPuntoAccesoDTO>>> ApiSucursalPuntosAccesoListPostAsyncWithHttpInfo (BusinessLayerAdminEmpresasHelpersListPuntosAccesoRequest body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class SucursalApi : ISucursalApi
    {
        private api.digitalsoftec.net.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SucursalApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SucursalApi(String basePath)
        {
            this.Configuration = new api.digitalsoftec.net.Client.Configuration { BasePath = basePath };

            ExceptionFactory = api.digitalsoftec.net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SucursalApi"/> class
        /// </summary>
        /// <returns></returns>
        public SucursalApi()
        {
            this.Configuration = api.digitalsoftec.net.Client.Configuration.Default;

            ExceptionFactory = api.digitalsoftec.net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SucursalApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SucursalApi(api.digitalsoftec.net.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = api.digitalsoftec.net.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = api.digitalsoftec.net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public api.digitalsoftec.net.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public api.digitalsoftec.net.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>BusinessLayerAdminEmpresasDTOPuntoAccesoSecuenciaFacturacionDetalleDTO</returns>
        public BusinessLayerAdminEmpresasDTOPuntoAccesoSecuenciaFacturacionDetalleDTO ApiSucursalAssignSecuenciaFacturacionPuntoAccesoPost (BusinessLayerAdminEmpresasHelpersCreatePuntoAccesoSecuenciaFacturacionDetalleRequest body = null)
        {
             ApiResponse<BusinessLayerAdminEmpresasDTOPuntoAccesoSecuenciaFacturacionDetalleDTO> localVarResponse = ApiSucursalAssignSecuenciaFacturacionPuntoAccesoPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BusinessLayerAdminEmpresasDTOPuntoAccesoSecuenciaFacturacionDetalleDTO</returns>
        public ApiResponse< BusinessLayerAdminEmpresasDTOPuntoAccesoSecuenciaFacturacionDetalleDTO > ApiSucursalAssignSecuenciaFacturacionPuntoAccesoPostWithHttpInfo (BusinessLayerAdminEmpresasHelpersCreatePuntoAccesoSecuenciaFacturacionDetalleRequest body = null)
        {

            var localVarPath = "/api/Sucursal/assign-secuencia-facturacion-punto-acceso";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiSucursalAssignSecuenciaFacturacionPuntoAccesoPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessLayerAdminEmpresasDTOPuntoAccesoSecuenciaFacturacionDetalleDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BusinessLayerAdminEmpresasDTOPuntoAccesoSecuenciaFacturacionDetalleDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessLayerAdminEmpresasDTOPuntoAccesoSecuenciaFacturacionDetalleDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BusinessLayerAdminEmpresasDTOPuntoAccesoSecuenciaFacturacionDetalleDTO</returns>
        public async System.Threading.Tasks.Task<BusinessLayerAdminEmpresasDTOPuntoAccesoSecuenciaFacturacionDetalleDTO> ApiSucursalAssignSecuenciaFacturacionPuntoAccesoPostAsync (BusinessLayerAdminEmpresasHelpersCreatePuntoAccesoSecuenciaFacturacionDetalleRequest body = null)
        {
             ApiResponse<BusinessLayerAdminEmpresasDTOPuntoAccesoSecuenciaFacturacionDetalleDTO> localVarResponse = await ApiSucursalAssignSecuenciaFacturacionPuntoAccesoPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BusinessLayerAdminEmpresasDTOPuntoAccesoSecuenciaFacturacionDetalleDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BusinessLayerAdminEmpresasDTOPuntoAccesoSecuenciaFacturacionDetalleDTO>> ApiSucursalAssignSecuenciaFacturacionPuntoAccesoPostAsyncWithHttpInfo (BusinessLayerAdminEmpresasHelpersCreatePuntoAccesoSecuenciaFacturacionDetalleRequest body = null)
        {

            var localVarPath = "/api/Sucursal/assign-secuencia-facturacion-punto-acceso";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiSucursalAssignSecuenciaFacturacionPuntoAccesoPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessLayerAdminEmpresasDTOPuntoAccesoSecuenciaFacturacionDetalleDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BusinessLayerAdminEmpresasDTOPuntoAccesoSecuenciaFacturacionDetalleDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessLayerAdminEmpresasDTOPuntoAccesoSecuenciaFacturacionDetalleDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>BusinessLayerAdminEmpresasDTOPuntoAccesoDTO</returns>
        public BusinessLayerAdminEmpresasDTOPuntoAccesoDTO ApiSucursalCreatePuntoAccesoPost (BusinessLayerAdminEmpresasHelpersCreatePuntoAccesoRequest body = null)
        {
             ApiResponse<BusinessLayerAdminEmpresasDTOPuntoAccesoDTO> localVarResponse = ApiSucursalCreatePuntoAccesoPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BusinessLayerAdminEmpresasDTOPuntoAccesoDTO</returns>
        public ApiResponse< BusinessLayerAdminEmpresasDTOPuntoAccesoDTO > ApiSucursalCreatePuntoAccesoPostWithHttpInfo (BusinessLayerAdminEmpresasHelpersCreatePuntoAccesoRequest body = null)
        {

            var localVarPath = "/api/Sucursal/create-punto-acceso";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiSucursalCreatePuntoAccesoPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessLayerAdminEmpresasDTOPuntoAccesoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BusinessLayerAdminEmpresasDTOPuntoAccesoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessLayerAdminEmpresasDTOPuntoAccesoDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BusinessLayerAdminEmpresasDTOPuntoAccesoDTO</returns>
        public async System.Threading.Tasks.Task<BusinessLayerAdminEmpresasDTOPuntoAccesoDTO> ApiSucursalCreatePuntoAccesoPostAsync (BusinessLayerAdminEmpresasHelpersCreatePuntoAccesoRequest body = null)
        {
             ApiResponse<BusinessLayerAdminEmpresasDTOPuntoAccesoDTO> localVarResponse = await ApiSucursalCreatePuntoAccesoPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BusinessLayerAdminEmpresasDTOPuntoAccesoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BusinessLayerAdminEmpresasDTOPuntoAccesoDTO>> ApiSucursalCreatePuntoAccesoPostAsyncWithHttpInfo (BusinessLayerAdminEmpresasHelpersCreatePuntoAccesoRequest body = null)
        {

            var localVarPath = "/api/Sucursal/create-punto-acceso";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiSucursalCreatePuntoAccesoPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessLayerAdminEmpresasDTOPuntoAccesoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BusinessLayerAdminEmpresasDTOPuntoAccesoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessLayerAdminEmpresasDTOPuntoAccesoDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>BusinessLayerAdminEmpresasDTOSucursalDTO</returns>
        public BusinessLayerAdminEmpresasDTOSucursalDTO ApiSucursalCreateSucursalPost (BusinessLayerAdminEmpresasHelpersCreateSucursalRequest body = null)
        {
             ApiResponse<BusinessLayerAdminEmpresasDTOSucursalDTO> localVarResponse = ApiSucursalCreateSucursalPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BusinessLayerAdminEmpresasDTOSucursalDTO</returns>
        public ApiResponse< BusinessLayerAdminEmpresasDTOSucursalDTO > ApiSucursalCreateSucursalPostWithHttpInfo (BusinessLayerAdminEmpresasHelpersCreateSucursalRequest body = null)
        {

            var localVarPath = "/api/Sucursal/create-sucursal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiSucursalCreateSucursalPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessLayerAdminEmpresasDTOSucursalDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BusinessLayerAdminEmpresasDTOSucursalDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessLayerAdminEmpresasDTOSucursalDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BusinessLayerAdminEmpresasDTOSucursalDTO</returns>
        public async System.Threading.Tasks.Task<BusinessLayerAdminEmpresasDTOSucursalDTO> ApiSucursalCreateSucursalPostAsync (BusinessLayerAdminEmpresasHelpersCreateSucursalRequest body = null)
        {
             ApiResponse<BusinessLayerAdminEmpresasDTOSucursalDTO> localVarResponse = await ApiSucursalCreateSucursalPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BusinessLayerAdminEmpresasDTOSucursalDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BusinessLayerAdminEmpresasDTOSucursalDTO>> ApiSucursalCreateSucursalPostAsyncWithHttpInfo (BusinessLayerAdminEmpresasHelpersCreateSucursalRequest body = null)
        {

            var localVarPath = "/api/Sucursal/create-sucursal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiSucursalCreateSucursalPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessLayerAdminEmpresasDTOSucursalDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BusinessLayerAdminEmpresasDTOSucursalDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessLayerAdminEmpresasDTOSucursalDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>bool?</returns>
        public bool? ApiSucursalDeletePuntoAccesoDelete (BusinessLayerAdminEmpresasHelpersDeletePuntoAccesoRequest body = null)
        {
             ApiResponse<bool?> localVarResponse = ApiSucursalDeletePuntoAccesoDeleteWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > ApiSucursalDeletePuntoAccesoDeleteWithHttpInfo (BusinessLayerAdminEmpresasHelpersDeletePuntoAccesoRequest body = null)
        {

            var localVarPath = "/api/Sucursal/delete-punto-acceso";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiSucursalDeletePuntoAccesoDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> ApiSucursalDeletePuntoAccesoDeleteAsync (BusinessLayerAdminEmpresasHelpersDeletePuntoAccesoRequest body = null)
        {
             ApiResponse<bool?> localVarResponse = await ApiSucursalDeletePuntoAccesoDeleteAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> ApiSucursalDeletePuntoAccesoDeleteAsyncWithHttpInfo (BusinessLayerAdminEmpresasHelpersDeletePuntoAccesoRequest body = null)
        {

            var localVarPath = "/api/Sucursal/delete-punto-acceso";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiSucursalDeletePuntoAccesoDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>bool?</returns>
        public bool? ApiSucursalDeleteSecuenciaFacturacionPuntoAccesoDelete (BusinessLayerAdminEmpresasHelpersDeletePuntoAccesoSecuenciaFacturacionDetalleRequest body = null)
        {
             ApiResponse<bool?> localVarResponse = ApiSucursalDeleteSecuenciaFacturacionPuntoAccesoDeleteWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > ApiSucursalDeleteSecuenciaFacturacionPuntoAccesoDeleteWithHttpInfo (BusinessLayerAdminEmpresasHelpersDeletePuntoAccesoSecuenciaFacturacionDetalleRequest body = null)
        {

            var localVarPath = "/api/Sucursal/delete-secuencia-facturacion-punto-acceso";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiSucursalDeleteSecuenciaFacturacionPuntoAccesoDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> ApiSucursalDeleteSecuenciaFacturacionPuntoAccesoDeleteAsync (BusinessLayerAdminEmpresasHelpersDeletePuntoAccesoSecuenciaFacturacionDetalleRequest body = null)
        {
             ApiResponse<bool?> localVarResponse = await ApiSucursalDeleteSecuenciaFacturacionPuntoAccesoDeleteAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> ApiSucursalDeleteSecuenciaFacturacionPuntoAccesoDeleteAsyncWithHttpInfo (BusinessLayerAdminEmpresasHelpersDeletePuntoAccesoSecuenciaFacturacionDetalleRequest body = null)
        {

            var localVarPath = "/api/Sucursal/delete-secuencia-facturacion-punto-acceso";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiSucursalDeleteSecuenciaFacturacionPuntoAccesoDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>bool?</returns>
        public bool? ApiSucursalDeleteSucursalDelete (BusinessLayerAdminEmpresasHelpersDeleteSucursalRequest body = null)
        {
             ApiResponse<bool?> localVarResponse = ApiSucursalDeleteSucursalDeleteWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > ApiSucursalDeleteSucursalDeleteWithHttpInfo (BusinessLayerAdminEmpresasHelpersDeleteSucursalRequest body = null)
        {

            var localVarPath = "/api/Sucursal/delete-sucursal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiSucursalDeleteSucursalDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> ApiSucursalDeleteSucursalDeleteAsync (BusinessLayerAdminEmpresasHelpersDeleteSucursalRequest body = null)
        {
             ApiResponse<bool?> localVarResponse = await ApiSucursalDeleteSucursalDeleteAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> ApiSucursalDeleteSucursalDeleteAsyncWithHttpInfo (BusinessLayerAdminEmpresasHelpersDeleteSucursalRequest body = null)
        {

            var localVarPath = "/api/Sucursal/delete-sucursal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiSucursalDeleteSucursalDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>BusinessLayerAdminEmpresasDTOPuntoAccesoDTO</returns>
        public BusinessLayerAdminEmpresasDTOPuntoAccesoDTO ApiSucursalEditPuntoAccesoPut (BusinessLayerAdminEmpresasHelpersEditPuntoAccesoRequest body = null)
        {
             ApiResponse<BusinessLayerAdminEmpresasDTOPuntoAccesoDTO> localVarResponse = ApiSucursalEditPuntoAccesoPutWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BusinessLayerAdminEmpresasDTOPuntoAccesoDTO</returns>
        public ApiResponse< BusinessLayerAdminEmpresasDTOPuntoAccesoDTO > ApiSucursalEditPuntoAccesoPutWithHttpInfo (BusinessLayerAdminEmpresasHelpersEditPuntoAccesoRequest body = null)
        {

            var localVarPath = "/api/Sucursal/edit-punto-acceso";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiSucursalEditPuntoAccesoPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessLayerAdminEmpresasDTOPuntoAccesoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BusinessLayerAdminEmpresasDTOPuntoAccesoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessLayerAdminEmpresasDTOPuntoAccesoDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BusinessLayerAdminEmpresasDTOPuntoAccesoDTO</returns>
        public async System.Threading.Tasks.Task<BusinessLayerAdminEmpresasDTOPuntoAccesoDTO> ApiSucursalEditPuntoAccesoPutAsync (BusinessLayerAdminEmpresasHelpersEditPuntoAccesoRequest body = null)
        {
             ApiResponse<BusinessLayerAdminEmpresasDTOPuntoAccesoDTO> localVarResponse = await ApiSucursalEditPuntoAccesoPutAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BusinessLayerAdminEmpresasDTOPuntoAccesoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BusinessLayerAdminEmpresasDTOPuntoAccesoDTO>> ApiSucursalEditPuntoAccesoPutAsyncWithHttpInfo (BusinessLayerAdminEmpresasHelpersEditPuntoAccesoRequest body = null)
        {

            var localVarPath = "/api/Sucursal/edit-punto-acceso";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiSucursalEditPuntoAccesoPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessLayerAdminEmpresasDTOPuntoAccesoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BusinessLayerAdminEmpresasDTOPuntoAccesoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessLayerAdminEmpresasDTOPuntoAccesoDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>BusinessLayerAdminEmpresasDTOSucursalDTO</returns>
        public BusinessLayerAdminEmpresasDTOSucursalDTO ApiSucursalEditSucursalPut (BusinessLayerAdminEmpresasHelpersEditSucursalRequest body = null)
        {
             ApiResponse<BusinessLayerAdminEmpresasDTOSucursalDTO> localVarResponse = ApiSucursalEditSucursalPutWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BusinessLayerAdminEmpresasDTOSucursalDTO</returns>
        public ApiResponse< BusinessLayerAdminEmpresasDTOSucursalDTO > ApiSucursalEditSucursalPutWithHttpInfo (BusinessLayerAdminEmpresasHelpersEditSucursalRequest body = null)
        {

            var localVarPath = "/api/Sucursal/edit-sucursal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiSucursalEditSucursalPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessLayerAdminEmpresasDTOSucursalDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BusinessLayerAdminEmpresasDTOSucursalDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessLayerAdminEmpresasDTOSucursalDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BusinessLayerAdminEmpresasDTOSucursalDTO</returns>
        public async System.Threading.Tasks.Task<BusinessLayerAdminEmpresasDTOSucursalDTO> ApiSucursalEditSucursalPutAsync (BusinessLayerAdminEmpresasHelpersEditSucursalRequest body = null)
        {
             ApiResponse<BusinessLayerAdminEmpresasDTOSucursalDTO> localVarResponse = await ApiSucursalEditSucursalPutAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BusinessLayerAdminEmpresasDTOSucursalDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BusinessLayerAdminEmpresasDTOSucursalDTO>> ApiSucursalEditSucursalPutAsyncWithHttpInfo (BusinessLayerAdminEmpresasHelpersEditSucursalRequest body = null)
        {

            var localVarPath = "/api/Sucursal/edit-sucursal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiSucursalEditSucursalPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessLayerAdminEmpresasDTOSucursalDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BusinessLayerAdminEmpresasDTOSucursalDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessLayerAdminEmpresasDTOSucursalDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>BusinessLayerAdminEmpresasDTOPuntoAccesoDTO</returns>
        public BusinessLayerAdminEmpresasDTOPuntoAccesoDTO ApiSucursalGetPuntoAccesoByIdPost (BusinessLayerAdminEmpresasHelpersFindPuntoAccesoRequest body = null)
        {
             ApiResponse<BusinessLayerAdminEmpresasDTOPuntoAccesoDTO> localVarResponse = ApiSucursalGetPuntoAccesoByIdPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BusinessLayerAdminEmpresasDTOPuntoAccesoDTO</returns>
        public ApiResponse< BusinessLayerAdminEmpresasDTOPuntoAccesoDTO > ApiSucursalGetPuntoAccesoByIdPostWithHttpInfo (BusinessLayerAdminEmpresasHelpersFindPuntoAccesoRequest body = null)
        {

            var localVarPath = "/api/Sucursal/get-punto-acceso-by-id";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiSucursalGetPuntoAccesoByIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessLayerAdminEmpresasDTOPuntoAccesoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BusinessLayerAdminEmpresasDTOPuntoAccesoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessLayerAdminEmpresasDTOPuntoAccesoDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BusinessLayerAdminEmpresasDTOPuntoAccesoDTO</returns>
        public async System.Threading.Tasks.Task<BusinessLayerAdminEmpresasDTOPuntoAccesoDTO> ApiSucursalGetPuntoAccesoByIdPostAsync (BusinessLayerAdminEmpresasHelpersFindPuntoAccesoRequest body = null)
        {
             ApiResponse<BusinessLayerAdminEmpresasDTOPuntoAccesoDTO> localVarResponse = await ApiSucursalGetPuntoAccesoByIdPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BusinessLayerAdminEmpresasDTOPuntoAccesoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BusinessLayerAdminEmpresasDTOPuntoAccesoDTO>> ApiSucursalGetPuntoAccesoByIdPostAsyncWithHttpInfo (BusinessLayerAdminEmpresasHelpersFindPuntoAccesoRequest body = null)
        {

            var localVarPath = "/api/Sucursal/get-punto-acceso-by-id";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiSucursalGetPuntoAccesoByIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessLayerAdminEmpresasDTOPuntoAccesoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BusinessLayerAdminEmpresasDTOPuntoAccesoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessLayerAdminEmpresasDTOPuntoAccesoDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>BusinessLayerAdminEmpresasDTOSucursalDTO</returns>
        public BusinessLayerAdminEmpresasDTOSucursalDTO ApiSucursalGetSucursalByIdPost (BusinessLayerAdminEmpresasHelpersFindSucursalRequest body = null)
        {
             ApiResponse<BusinessLayerAdminEmpresasDTOSucursalDTO> localVarResponse = ApiSucursalGetSucursalByIdPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BusinessLayerAdminEmpresasDTOSucursalDTO</returns>
        public ApiResponse< BusinessLayerAdminEmpresasDTOSucursalDTO > ApiSucursalGetSucursalByIdPostWithHttpInfo (BusinessLayerAdminEmpresasHelpersFindSucursalRequest body = null)
        {

            var localVarPath = "/api/Sucursal/get-sucursal-by-id";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiSucursalGetSucursalByIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessLayerAdminEmpresasDTOSucursalDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BusinessLayerAdminEmpresasDTOSucursalDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessLayerAdminEmpresasDTOSucursalDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BusinessLayerAdminEmpresasDTOSucursalDTO</returns>
        public async System.Threading.Tasks.Task<BusinessLayerAdminEmpresasDTOSucursalDTO> ApiSucursalGetSucursalByIdPostAsync (BusinessLayerAdminEmpresasHelpersFindSucursalRequest body = null)
        {
             ApiResponse<BusinessLayerAdminEmpresasDTOSucursalDTO> localVarResponse = await ApiSucursalGetSucursalByIdPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BusinessLayerAdminEmpresasDTOSucursalDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BusinessLayerAdminEmpresasDTOSucursalDTO>> ApiSucursalGetSucursalByIdPostAsyncWithHttpInfo (BusinessLayerAdminEmpresasHelpersFindSucursalRequest body = null)
        {

            var localVarPath = "/api/Sucursal/get-sucursal-by-id";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiSucursalGetSucursalByIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessLayerAdminEmpresasDTOSucursalDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BusinessLayerAdminEmpresasDTOSucursalDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessLayerAdminEmpresasDTOSucursalDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;BusinessLayerAdminEmpresasDTOSucursalDTO&gt;</returns>
        public List<BusinessLayerAdminEmpresasDTOSucursalDTO> ApiSucursalListSucursalesPost (BusinessLayerAdminEmpresasHelpersListSucursalesRequest body = null)
        {
             ApiResponse<List<BusinessLayerAdminEmpresasDTOSucursalDTO>> localVarResponse = ApiSucursalListSucursalesPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;BusinessLayerAdminEmpresasDTOSucursalDTO&gt;</returns>
        public ApiResponse< List<BusinessLayerAdminEmpresasDTOSucursalDTO> > ApiSucursalListSucursalesPostWithHttpInfo (BusinessLayerAdminEmpresasHelpersListSucursalesRequest body = null)
        {

            var localVarPath = "/api/Sucursal/list-sucursales";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiSucursalListSucursalesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BusinessLayerAdminEmpresasDTOSucursalDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<BusinessLayerAdminEmpresasDTOSucursalDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BusinessLayerAdminEmpresasDTOSucursalDTO>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of List&lt;BusinessLayerAdminEmpresasDTOSucursalDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<BusinessLayerAdminEmpresasDTOSucursalDTO>> ApiSucursalListSucursalesPostAsync (BusinessLayerAdminEmpresasHelpersListSucursalesRequest body = null)
        {
             ApiResponse<List<BusinessLayerAdminEmpresasDTOSucursalDTO>> localVarResponse = await ApiSucursalListSucursalesPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;BusinessLayerAdminEmpresasDTOSucursalDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BusinessLayerAdminEmpresasDTOSucursalDTO>>> ApiSucursalListSucursalesPostAsyncWithHttpInfo (BusinessLayerAdminEmpresasHelpersListSucursalesRequest body = null)
        {

            var localVarPath = "/api/Sucursal/list-sucursales";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiSucursalListSucursalesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BusinessLayerAdminEmpresasDTOSucursalDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<BusinessLayerAdminEmpresasDTOSucursalDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BusinessLayerAdminEmpresasDTOSucursalDTO>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;BusinessLayerAdminEmpresasDTOPuntoAccesoDTO&gt;</returns>
        public List<BusinessLayerAdminEmpresasDTOPuntoAccesoDTO> ApiSucursalPuntosAccesoListPost (BusinessLayerAdminEmpresasHelpersListPuntosAccesoRequest body = null)
        {
             ApiResponse<List<BusinessLayerAdminEmpresasDTOPuntoAccesoDTO>> localVarResponse = ApiSucursalPuntosAccesoListPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;BusinessLayerAdminEmpresasDTOPuntoAccesoDTO&gt;</returns>
        public ApiResponse< List<BusinessLayerAdminEmpresasDTOPuntoAccesoDTO> > ApiSucursalPuntosAccesoListPostWithHttpInfo (BusinessLayerAdminEmpresasHelpersListPuntosAccesoRequest body = null)
        {

            var localVarPath = "/api/Sucursal/puntos-acceso-list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiSucursalPuntosAccesoListPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BusinessLayerAdminEmpresasDTOPuntoAccesoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<BusinessLayerAdminEmpresasDTOPuntoAccesoDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BusinessLayerAdminEmpresasDTOPuntoAccesoDTO>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of List&lt;BusinessLayerAdminEmpresasDTOPuntoAccesoDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<BusinessLayerAdminEmpresasDTOPuntoAccesoDTO>> ApiSucursalPuntosAccesoListPostAsync (BusinessLayerAdminEmpresasHelpersListPuntosAccesoRequest body = null)
        {
             ApiResponse<List<BusinessLayerAdminEmpresasDTOPuntoAccesoDTO>> localVarResponse = await ApiSucursalPuntosAccesoListPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;BusinessLayerAdminEmpresasDTOPuntoAccesoDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BusinessLayerAdminEmpresasDTOPuntoAccesoDTO>>> ApiSucursalPuntosAccesoListPostAsyncWithHttpInfo (BusinessLayerAdminEmpresasHelpersListPuntosAccesoRequest body = null)
        {

            var localVarPath = "/api/Sucursal/puntos-acceso-list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiSucursalPuntosAccesoListPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BusinessLayerAdminEmpresasDTOPuntoAccesoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<BusinessLayerAdminEmpresasDTOPuntoAccesoDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BusinessLayerAdminEmpresasDTOPuntoAccesoDTO>)));
        }

    }
}
