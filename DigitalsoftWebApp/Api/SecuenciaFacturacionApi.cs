/* 
 * API Servicios Integrados InventPro ERP - DigitalsoftEC
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using api.digitalsoftec.net.Client;
using api.digitalsoftec.net.Model;

namespace api.digitalsoftec.net.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ISecuenciaFacturacionApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>BusinessLayerCommonDTOSecuenciaFacturacionDTO</returns>
        BusinessLayerCommonDTOSecuenciaFacturacionDTO ApiSecuenciaFacturacionCreatePost (BusinessLayerCommonHelpersCreateSecuenciaFacturacionRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BusinessLayerCommonDTOSecuenciaFacturacionDTO</returns>
        ApiResponse<BusinessLayerCommonDTOSecuenciaFacturacionDTO> ApiSecuenciaFacturacionCreatePostWithHttpInfo (BusinessLayerCommonHelpersCreateSecuenciaFacturacionRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>BusinessLayerCommonDTOSecuenciaFacturacionRangoExclusionDTO</returns>
        BusinessLayerCommonDTOSecuenciaFacturacionRangoExclusionDTO ApiSecuenciaFacturacionCreateRangoExclusionPost (BusinessLayerCommonHelpersCreateSecuenciaFacturacionRangoExclusionRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BusinessLayerCommonDTOSecuenciaFacturacionRangoExclusionDTO</returns>
        ApiResponse<BusinessLayerCommonDTOSecuenciaFacturacionRangoExclusionDTO> ApiSecuenciaFacturacionCreateRangoExclusionPostWithHttpInfo (BusinessLayerCommonHelpersCreateSecuenciaFacturacionRangoExclusionRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>bool?</returns>
        bool? ApiSecuenciaFacturacionDeleteDelete (BusinessLayerCommonHelpersDeleteSecuenciaFacturacionRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> ApiSecuenciaFacturacionDeleteDeleteWithHttpInfo (BusinessLayerCommonHelpersDeleteSecuenciaFacturacionRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>bool?</returns>
        bool? ApiSecuenciaFacturacionDeleteRangoExclusionDelete (BusinessLayerCommonHelpersDeleteSecuenciaFacturacionRangoExclusionRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> ApiSecuenciaFacturacionDeleteRangoExclusionDeleteWithHttpInfo (BusinessLayerCommonHelpersDeleteSecuenciaFacturacionRangoExclusionRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>BusinessLayerCommonDTOSecuenciaFacturacionDTO</returns>
        BusinessLayerCommonDTOSecuenciaFacturacionDTO ApiSecuenciaFacturacionEditPut (BusinessLayerCommonHelpersEditSecuenciaFacturacionRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BusinessLayerCommonDTOSecuenciaFacturacionDTO</returns>
        ApiResponse<BusinessLayerCommonDTOSecuenciaFacturacionDTO> ApiSecuenciaFacturacionEditPutWithHttpInfo (BusinessLayerCommonHelpersEditSecuenciaFacturacionRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>BusinessLayerCommonDTOSecuenciaFacturacionDTO</returns>
        BusinessLayerCommonDTOSecuenciaFacturacionDTO ApiSecuenciaFacturacionGetByIdPost (BusinessLayerCommonHelpersFindSecuenciaFacturacionRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BusinessLayerCommonDTOSecuenciaFacturacionDTO</returns>
        ApiResponse<BusinessLayerCommonDTOSecuenciaFacturacionDTO> ApiSecuenciaFacturacionGetByIdPostWithHttpInfo (BusinessLayerCommonHelpersFindSecuenciaFacturacionRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;BusinessLayerCommonDTOSecuenciaFacturacionDTO&gt;</returns>
        List<BusinessLayerCommonDTOSecuenciaFacturacionDTO> ApiSecuenciaFacturacionListPost (BusinessLayerCommonHelpersListSecuenciaFacturacionRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;BusinessLayerCommonDTOSecuenciaFacturacionDTO&gt;</returns>
        ApiResponse<List<BusinessLayerCommonDTOSecuenciaFacturacionDTO>> ApiSecuenciaFacturacionListPostWithHttpInfo (BusinessLayerCommonHelpersListSecuenciaFacturacionRequest body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BusinessLayerCommonDTOSecuenciaFacturacionDTO</returns>
        System.Threading.Tasks.Task<BusinessLayerCommonDTOSecuenciaFacturacionDTO> ApiSecuenciaFacturacionCreatePostAsync (BusinessLayerCommonHelpersCreateSecuenciaFacturacionRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BusinessLayerCommonDTOSecuenciaFacturacionDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BusinessLayerCommonDTOSecuenciaFacturacionDTO>> ApiSecuenciaFacturacionCreatePostAsyncWithHttpInfo (BusinessLayerCommonHelpersCreateSecuenciaFacturacionRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BusinessLayerCommonDTOSecuenciaFacturacionRangoExclusionDTO</returns>
        System.Threading.Tasks.Task<BusinessLayerCommonDTOSecuenciaFacturacionRangoExclusionDTO> ApiSecuenciaFacturacionCreateRangoExclusionPostAsync (BusinessLayerCommonHelpersCreateSecuenciaFacturacionRangoExclusionRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BusinessLayerCommonDTOSecuenciaFacturacionRangoExclusionDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BusinessLayerCommonDTOSecuenciaFacturacionRangoExclusionDTO>> ApiSecuenciaFacturacionCreateRangoExclusionPostAsyncWithHttpInfo (BusinessLayerCommonHelpersCreateSecuenciaFacturacionRangoExclusionRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> ApiSecuenciaFacturacionDeleteDeleteAsync (BusinessLayerCommonHelpersDeleteSecuenciaFacturacionRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> ApiSecuenciaFacturacionDeleteDeleteAsyncWithHttpInfo (BusinessLayerCommonHelpersDeleteSecuenciaFacturacionRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> ApiSecuenciaFacturacionDeleteRangoExclusionDeleteAsync (BusinessLayerCommonHelpersDeleteSecuenciaFacturacionRangoExclusionRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> ApiSecuenciaFacturacionDeleteRangoExclusionDeleteAsyncWithHttpInfo (BusinessLayerCommonHelpersDeleteSecuenciaFacturacionRangoExclusionRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BusinessLayerCommonDTOSecuenciaFacturacionDTO</returns>
        System.Threading.Tasks.Task<BusinessLayerCommonDTOSecuenciaFacturacionDTO> ApiSecuenciaFacturacionEditPutAsync (BusinessLayerCommonHelpersEditSecuenciaFacturacionRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BusinessLayerCommonDTOSecuenciaFacturacionDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BusinessLayerCommonDTOSecuenciaFacturacionDTO>> ApiSecuenciaFacturacionEditPutAsyncWithHttpInfo (BusinessLayerCommonHelpersEditSecuenciaFacturacionRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BusinessLayerCommonDTOSecuenciaFacturacionDTO</returns>
        System.Threading.Tasks.Task<BusinessLayerCommonDTOSecuenciaFacturacionDTO> ApiSecuenciaFacturacionGetByIdPostAsync (BusinessLayerCommonHelpersFindSecuenciaFacturacionRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BusinessLayerCommonDTOSecuenciaFacturacionDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BusinessLayerCommonDTOSecuenciaFacturacionDTO>> ApiSecuenciaFacturacionGetByIdPostAsyncWithHttpInfo (BusinessLayerCommonHelpersFindSecuenciaFacturacionRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of List&lt;BusinessLayerCommonDTOSecuenciaFacturacionDTO&gt;</returns>
        System.Threading.Tasks.Task<List<BusinessLayerCommonDTOSecuenciaFacturacionDTO>> ApiSecuenciaFacturacionListPostAsync (BusinessLayerCommonHelpersListSecuenciaFacturacionRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;BusinessLayerCommonDTOSecuenciaFacturacionDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BusinessLayerCommonDTOSecuenciaFacturacionDTO>>> ApiSecuenciaFacturacionListPostAsyncWithHttpInfo (BusinessLayerCommonHelpersListSecuenciaFacturacionRequest body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class SecuenciaFacturacionApi : ISecuenciaFacturacionApi
    {
        private api.digitalsoftec.net.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SecuenciaFacturacionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SecuenciaFacturacionApi(String basePath)
        {
            this.Configuration = new api.digitalsoftec.net.Client.Configuration { BasePath = basePath };

            ExceptionFactory = api.digitalsoftec.net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SecuenciaFacturacionApi"/> class
        /// </summary>
        /// <returns></returns>
        public SecuenciaFacturacionApi()
        {
            this.Configuration = api.digitalsoftec.net.Client.Configuration.Default;

            ExceptionFactory = api.digitalsoftec.net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SecuenciaFacturacionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SecuenciaFacturacionApi(api.digitalsoftec.net.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = api.digitalsoftec.net.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = api.digitalsoftec.net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public api.digitalsoftec.net.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public api.digitalsoftec.net.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>BusinessLayerCommonDTOSecuenciaFacturacionDTO</returns>
        public BusinessLayerCommonDTOSecuenciaFacturacionDTO ApiSecuenciaFacturacionCreatePost (BusinessLayerCommonHelpersCreateSecuenciaFacturacionRequest body = null)
        {
             ApiResponse<BusinessLayerCommonDTOSecuenciaFacturacionDTO> localVarResponse = ApiSecuenciaFacturacionCreatePostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BusinessLayerCommonDTOSecuenciaFacturacionDTO</returns>
        public ApiResponse< BusinessLayerCommonDTOSecuenciaFacturacionDTO > ApiSecuenciaFacturacionCreatePostWithHttpInfo (BusinessLayerCommonHelpersCreateSecuenciaFacturacionRequest body = null)
        {

            var localVarPath = "/api/SecuenciaFacturacion/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiSecuenciaFacturacionCreatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessLayerCommonDTOSecuenciaFacturacionDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BusinessLayerCommonDTOSecuenciaFacturacionDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessLayerCommonDTOSecuenciaFacturacionDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BusinessLayerCommonDTOSecuenciaFacturacionDTO</returns>
        public async System.Threading.Tasks.Task<BusinessLayerCommonDTOSecuenciaFacturacionDTO> ApiSecuenciaFacturacionCreatePostAsync (BusinessLayerCommonHelpersCreateSecuenciaFacturacionRequest body = null)
        {
             ApiResponse<BusinessLayerCommonDTOSecuenciaFacturacionDTO> localVarResponse = await ApiSecuenciaFacturacionCreatePostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BusinessLayerCommonDTOSecuenciaFacturacionDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BusinessLayerCommonDTOSecuenciaFacturacionDTO>> ApiSecuenciaFacturacionCreatePostAsyncWithHttpInfo (BusinessLayerCommonHelpersCreateSecuenciaFacturacionRequest body = null)
        {

            var localVarPath = "/api/SecuenciaFacturacion/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiSecuenciaFacturacionCreatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessLayerCommonDTOSecuenciaFacturacionDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BusinessLayerCommonDTOSecuenciaFacturacionDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessLayerCommonDTOSecuenciaFacturacionDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>BusinessLayerCommonDTOSecuenciaFacturacionRangoExclusionDTO</returns>
        public BusinessLayerCommonDTOSecuenciaFacturacionRangoExclusionDTO ApiSecuenciaFacturacionCreateRangoExclusionPost (BusinessLayerCommonHelpersCreateSecuenciaFacturacionRangoExclusionRequest body = null)
        {
             ApiResponse<BusinessLayerCommonDTOSecuenciaFacturacionRangoExclusionDTO> localVarResponse = ApiSecuenciaFacturacionCreateRangoExclusionPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BusinessLayerCommonDTOSecuenciaFacturacionRangoExclusionDTO</returns>
        public ApiResponse< BusinessLayerCommonDTOSecuenciaFacturacionRangoExclusionDTO > ApiSecuenciaFacturacionCreateRangoExclusionPostWithHttpInfo (BusinessLayerCommonHelpersCreateSecuenciaFacturacionRangoExclusionRequest body = null)
        {

            var localVarPath = "/api/SecuenciaFacturacion/create-rango-exclusion";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiSecuenciaFacturacionCreateRangoExclusionPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessLayerCommonDTOSecuenciaFacturacionRangoExclusionDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BusinessLayerCommonDTOSecuenciaFacturacionRangoExclusionDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessLayerCommonDTOSecuenciaFacturacionRangoExclusionDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BusinessLayerCommonDTOSecuenciaFacturacionRangoExclusionDTO</returns>
        public async System.Threading.Tasks.Task<BusinessLayerCommonDTOSecuenciaFacturacionRangoExclusionDTO> ApiSecuenciaFacturacionCreateRangoExclusionPostAsync (BusinessLayerCommonHelpersCreateSecuenciaFacturacionRangoExclusionRequest body = null)
        {
             ApiResponse<BusinessLayerCommonDTOSecuenciaFacturacionRangoExclusionDTO> localVarResponse = await ApiSecuenciaFacturacionCreateRangoExclusionPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BusinessLayerCommonDTOSecuenciaFacturacionRangoExclusionDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BusinessLayerCommonDTOSecuenciaFacturacionRangoExclusionDTO>> ApiSecuenciaFacturacionCreateRangoExclusionPostAsyncWithHttpInfo (BusinessLayerCommonHelpersCreateSecuenciaFacturacionRangoExclusionRequest body = null)
        {

            var localVarPath = "/api/SecuenciaFacturacion/create-rango-exclusion";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiSecuenciaFacturacionCreateRangoExclusionPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessLayerCommonDTOSecuenciaFacturacionRangoExclusionDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BusinessLayerCommonDTOSecuenciaFacturacionRangoExclusionDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessLayerCommonDTOSecuenciaFacturacionRangoExclusionDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>bool?</returns>
        public bool? ApiSecuenciaFacturacionDeleteDelete (BusinessLayerCommonHelpersDeleteSecuenciaFacturacionRequest body = null)
        {
             ApiResponse<bool?> localVarResponse = ApiSecuenciaFacturacionDeleteDeleteWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > ApiSecuenciaFacturacionDeleteDeleteWithHttpInfo (BusinessLayerCommonHelpersDeleteSecuenciaFacturacionRequest body = null)
        {

            var localVarPath = "/api/SecuenciaFacturacion/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiSecuenciaFacturacionDeleteDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> ApiSecuenciaFacturacionDeleteDeleteAsync (BusinessLayerCommonHelpersDeleteSecuenciaFacturacionRequest body = null)
        {
             ApiResponse<bool?> localVarResponse = await ApiSecuenciaFacturacionDeleteDeleteAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> ApiSecuenciaFacturacionDeleteDeleteAsyncWithHttpInfo (BusinessLayerCommonHelpersDeleteSecuenciaFacturacionRequest body = null)
        {

            var localVarPath = "/api/SecuenciaFacturacion/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiSecuenciaFacturacionDeleteDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>bool?</returns>
        public bool? ApiSecuenciaFacturacionDeleteRangoExclusionDelete (BusinessLayerCommonHelpersDeleteSecuenciaFacturacionRangoExclusionRequest body = null)
        {
             ApiResponse<bool?> localVarResponse = ApiSecuenciaFacturacionDeleteRangoExclusionDeleteWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > ApiSecuenciaFacturacionDeleteRangoExclusionDeleteWithHttpInfo (BusinessLayerCommonHelpersDeleteSecuenciaFacturacionRangoExclusionRequest body = null)
        {

            var localVarPath = "/api/SecuenciaFacturacion/delete-rango-exclusion";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiSecuenciaFacturacionDeleteRangoExclusionDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> ApiSecuenciaFacturacionDeleteRangoExclusionDeleteAsync (BusinessLayerCommonHelpersDeleteSecuenciaFacturacionRangoExclusionRequest body = null)
        {
             ApiResponse<bool?> localVarResponse = await ApiSecuenciaFacturacionDeleteRangoExclusionDeleteAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> ApiSecuenciaFacturacionDeleteRangoExclusionDeleteAsyncWithHttpInfo (BusinessLayerCommonHelpersDeleteSecuenciaFacturacionRangoExclusionRequest body = null)
        {

            var localVarPath = "/api/SecuenciaFacturacion/delete-rango-exclusion";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiSecuenciaFacturacionDeleteRangoExclusionDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>BusinessLayerCommonDTOSecuenciaFacturacionDTO</returns>
        public BusinessLayerCommonDTOSecuenciaFacturacionDTO ApiSecuenciaFacturacionEditPut (BusinessLayerCommonHelpersEditSecuenciaFacturacionRequest body = null)
        {
             ApiResponse<BusinessLayerCommonDTOSecuenciaFacturacionDTO> localVarResponse = ApiSecuenciaFacturacionEditPutWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BusinessLayerCommonDTOSecuenciaFacturacionDTO</returns>
        public ApiResponse< BusinessLayerCommonDTOSecuenciaFacturacionDTO > ApiSecuenciaFacturacionEditPutWithHttpInfo (BusinessLayerCommonHelpersEditSecuenciaFacturacionRequest body = null)
        {

            var localVarPath = "/api/SecuenciaFacturacion/edit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiSecuenciaFacturacionEditPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessLayerCommonDTOSecuenciaFacturacionDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BusinessLayerCommonDTOSecuenciaFacturacionDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessLayerCommonDTOSecuenciaFacturacionDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BusinessLayerCommonDTOSecuenciaFacturacionDTO</returns>
        public async System.Threading.Tasks.Task<BusinessLayerCommonDTOSecuenciaFacturacionDTO> ApiSecuenciaFacturacionEditPutAsync (BusinessLayerCommonHelpersEditSecuenciaFacturacionRequest body = null)
        {
             ApiResponse<BusinessLayerCommonDTOSecuenciaFacturacionDTO> localVarResponse = await ApiSecuenciaFacturacionEditPutAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BusinessLayerCommonDTOSecuenciaFacturacionDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BusinessLayerCommonDTOSecuenciaFacturacionDTO>> ApiSecuenciaFacturacionEditPutAsyncWithHttpInfo (BusinessLayerCommonHelpersEditSecuenciaFacturacionRequest body = null)
        {

            var localVarPath = "/api/SecuenciaFacturacion/edit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiSecuenciaFacturacionEditPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessLayerCommonDTOSecuenciaFacturacionDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BusinessLayerCommonDTOSecuenciaFacturacionDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessLayerCommonDTOSecuenciaFacturacionDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>BusinessLayerCommonDTOSecuenciaFacturacionDTO</returns>
        public BusinessLayerCommonDTOSecuenciaFacturacionDTO ApiSecuenciaFacturacionGetByIdPost (BusinessLayerCommonHelpersFindSecuenciaFacturacionRequest body = null)
        {
             ApiResponse<BusinessLayerCommonDTOSecuenciaFacturacionDTO> localVarResponse = ApiSecuenciaFacturacionGetByIdPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BusinessLayerCommonDTOSecuenciaFacturacionDTO</returns>
        public ApiResponse< BusinessLayerCommonDTOSecuenciaFacturacionDTO > ApiSecuenciaFacturacionGetByIdPostWithHttpInfo (BusinessLayerCommonHelpersFindSecuenciaFacturacionRequest body = null)
        {

            var localVarPath = "/api/SecuenciaFacturacion/get-by-id";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiSecuenciaFacturacionGetByIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessLayerCommonDTOSecuenciaFacturacionDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BusinessLayerCommonDTOSecuenciaFacturacionDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessLayerCommonDTOSecuenciaFacturacionDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BusinessLayerCommonDTOSecuenciaFacturacionDTO</returns>
        public async System.Threading.Tasks.Task<BusinessLayerCommonDTOSecuenciaFacturacionDTO> ApiSecuenciaFacturacionGetByIdPostAsync (BusinessLayerCommonHelpersFindSecuenciaFacturacionRequest body = null)
        {
             ApiResponse<BusinessLayerCommonDTOSecuenciaFacturacionDTO> localVarResponse = await ApiSecuenciaFacturacionGetByIdPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BusinessLayerCommonDTOSecuenciaFacturacionDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BusinessLayerCommonDTOSecuenciaFacturacionDTO>> ApiSecuenciaFacturacionGetByIdPostAsyncWithHttpInfo (BusinessLayerCommonHelpersFindSecuenciaFacturacionRequest body = null)
        {

            var localVarPath = "/api/SecuenciaFacturacion/get-by-id";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiSecuenciaFacturacionGetByIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessLayerCommonDTOSecuenciaFacturacionDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BusinessLayerCommonDTOSecuenciaFacturacionDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessLayerCommonDTOSecuenciaFacturacionDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;BusinessLayerCommonDTOSecuenciaFacturacionDTO&gt;</returns>
        public List<BusinessLayerCommonDTOSecuenciaFacturacionDTO> ApiSecuenciaFacturacionListPost (BusinessLayerCommonHelpersListSecuenciaFacturacionRequest body = null)
        {
             ApiResponse<List<BusinessLayerCommonDTOSecuenciaFacturacionDTO>> localVarResponse = ApiSecuenciaFacturacionListPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;BusinessLayerCommonDTOSecuenciaFacturacionDTO&gt;</returns>
        public ApiResponse< List<BusinessLayerCommonDTOSecuenciaFacturacionDTO> > ApiSecuenciaFacturacionListPostWithHttpInfo (BusinessLayerCommonHelpersListSecuenciaFacturacionRequest body = null)
        {

            var localVarPath = "/api/SecuenciaFacturacion/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiSecuenciaFacturacionListPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BusinessLayerCommonDTOSecuenciaFacturacionDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<BusinessLayerCommonDTOSecuenciaFacturacionDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BusinessLayerCommonDTOSecuenciaFacturacionDTO>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of List&lt;BusinessLayerCommonDTOSecuenciaFacturacionDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<BusinessLayerCommonDTOSecuenciaFacturacionDTO>> ApiSecuenciaFacturacionListPostAsync (BusinessLayerCommonHelpersListSecuenciaFacturacionRequest body = null)
        {
             ApiResponse<List<BusinessLayerCommonDTOSecuenciaFacturacionDTO>> localVarResponse = await ApiSecuenciaFacturacionListPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="api.digitalsoftec.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;BusinessLayerCommonDTOSecuenciaFacturacionDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BusinessLayerCommonDTOSecuenciaFacturacionDTO>>> ApiSecuenciaFacturacionListPostAsyncWithHttpInfo (BusinessLayerCommonHelpersListSecuenciaFacturacionRequest body = null)
        {

            var localVarPath = "/api/SecuenciaFacturacion/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiSecuenciaFacturacionListPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BusinessLayerCommonDTOSecuenciaFacturacionDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<BusinessLayerCommonDTOSecuenciaFacturacionDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BusinessLayerCommonDTOSecuenciaFacturacionDTO>)));
        }

    }
}
